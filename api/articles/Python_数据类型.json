{"title":"Python-数据类型","slug":"Python_数据类型","date":"2019-11-05T16:00:00.000Z","updated":"2019-11-10T04:28:35.014Z","comments":true,"excerpt":"","content":"<h1 id=\"YJSchaf’s-study-of-Python\"><a href=\"#YJSchaf’s-study-of-Python\" class=\"headerlink\" title=\"YJSchaf’s study of Python\"></a>YJSchaf’s study of Python</h1><h2 id=\"标准数据类型\"><a href=\"#标准数据类型\" class=\"headerlink\" title=\"标准数据类型\"></a><strong>标准数据类型</strong></h2><p>Python3 中有六个标准的数据类型：</p>\n<ul>\n<li>Number（数字）</li>\n<li>String（字符串）</li>\n<li>List（列表）</li>\n<li>Tuple（元组）</li>\n<li>Set（集合）</li>\n<li>Dictionary（字典）</li>\n</ul>\n<p>Python3 的六个标准数据类型中：</p>\n<ul>\n<li>不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组）；</li>\n</ul>\n<ul>\n<li>可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合）。</li>\n</ul>\n<h3 id=\"赋值\"><a href=\"#赋值\" class=\"headerlink\" title=\"赋值\"></a><strong>赋值</strong></h3><p>可以单个赋值 ,也可连着赋值，更可以多个赋值<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">a = b = c = d = <span class=\"number\">1</span></span><br><span class=\"line\">a , b , c = <span class=\"number\">11</span> , <span class=\"string\">\"HHHHHH\"</span> , <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"判断数据类型\"><a href=\"#判断数据类型\" class=\"headerlink\" title=\"判断数据类型\"></a><strong>判断数据类型</strong></h3><p><strong>type()</strong></p>\n<p>type() 返回 <class '类型'></class></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(type(变量))</span><br></pre></td></tr></table></figure>\n<p><strong>isinstance(变量, 类型)</strong></p>\n<p>返回0\\1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(isinstance(变量, 类型))</span><br></pre></td></tr></table></figure>\n<p> isinstance 和 type 的区别在于：</p>\n<ul>\n<li>type()不会认为子类是一种父类类型。</li>\n<li>isinstance()会认为子类是一种父类类型。</li>\n</ul>\n<h3 id=\"可以用del来删除定义的变量，多个用“-”隔开\"><a href=\"#可以用del来删除定义的变量，多个用“-”隔开\" class=\"headerlink\" title=\"可以用del来删除定义的变量，多个用“,”隔开\"></a>可以用<strong>del</strong>来删除定义的变量，多个用“,”隔开</h3><h2 id=\"Number（数字）\"><a href=\"#Number（数字）\" class=\"headerlink\" title=\"Number（数字）\"></a><strong>Number（数字）</strong></h2><p>Python3 支持 int、float、bool、complex（复数）。</p>\n<p>在Python 3里，只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</p>\n<p>像大多数语言一样，数值类型的赋值和计算都是很直观的。</p>\n<p>内置的 type() 函数可以用来查询变量所指的对象类型。</p>\n<p><strong>数值的除法包含两个运算符：/ 返回一个浮点数，// 返回一个整数。</strong></p>\n<p>在混合计算时，Python会把整型转换成为浮点数。 </p>\n<p><strong>math 库</strong> </p>\n<blockquote>\n<p>abs，ceil，exp，fabs，floor，log，log10，log2，max(可加序列)，min(可加序列)，modf，pow，round(x[,n]) 四舍五入到小数点后n位，sqrt()，hypot(x,y) = $ \\sqrt{x^2+y^2} $</p>\n</blockquote>\n<p><strong>random库</strong><br>choice(seq)序列中随机挑一个，randrange([start,]stop[,step=1]) 在一定范围内按步长随机挑一个数，random()$ [0,1)$随机，randint(star,stop) $[star,stop]$区间内随机整数 ， uniform(star,stop) 在$[star,stop]$ 区间内随机一个整数，shuffle(lst) 序列所有元素随机排序。</p>\n<h2 id=\"String（字符串）\"><a href=\"#String（字符串）\" class=\"headerlink\" title=\"String（字符串）\"></a><strong>String（字符串）</strong></h2><p>Python中的字符串用单引号 ‘ 或双引号 “ 括起来，同时使用反斜杠 \\ 转义特殊字符。</p>\n<p>Python 不支持单字符类型，单字符在 Python 中也是作为一个字符串使用。</p>\n<p>字符串的截取的语法格式如下：</p>\n<p>变量[头下标:尾下标:步长]</p>\n<p>加号 + 是字符串的连接符， 星号 * 表示复制当前字符串，紧跟的数字为复制的次数。</p>\n<p>Python 使用反斜杠(\\)转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个 r，表示原始字符串</p>\n<p> 另外，反斜杠()可以作为续行符，表示下一行是上一行的延续。也可以使用 “””…””” 或者 ‘’’…’’’ 跨越多行。</p>\n<p>注意，Python 没有单独的字符类型，一个字符就是长度为1的字符串。 </p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>\\</th>\n<th>\\‘</th>\n<th>\\“</th>\n<th>\\a</th>\n<th>\\b</th>\n<th>\\000</th>\n<th>\\n</th>\n<th>\\v</th>\n<th>\\t</th>\n<th>\\r</th>\n<th>\\f</th>\n<th>\\oyy</th>\n<th>\\xyy</th>\n<th>\\other</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>含义</td>\n<td>续行</td>\n<td>单引</td>\n<td>双引</td>\n<td>响铃</td>\n<td>退格</td>\n<td>空</td>\n<td>换行</td>\n<td>纵向制表</td>\n<td>横向制表</td>\n<td>回车</td>\n<td>换页</td>\n<td>八进制数，yy 代表的字符</td>\n<td>十六进制数，yy代表的字符</td>\n<td>其它的字符以普通格式输出</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>%c</th>\n<th>%s</th>\n<th>%d</th>\n<th>%u</th>\n<th>%o</th>\n<th>%x</th>\n<th>%X</th>\n<th>%f</th>\n<th>%e</th>\n<th>%E</th>\n<th>%g</th>\n<th>%G</th>\n<th>%p</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>含义</td>\n<td>字符及其ASCII码</td>\n<td>字符串</td>\n<td>整数</td>\n<td>无符号整形</td>\n<td>八进制</td>\n<td>16进制</td>\n<td>16大写</td>\n<td>浮点</td>\n<td>科学计数法</td>\n<td>科学计数法</td>\n<td>最短输出</td>\n<td>最短输出</td>\n<td>用十六进制数格式化变量的地址</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"List（列表）\"><a href=\"#List（列表）\" class=\"headerlink\" title=\"List（列表）\"></a><strong>List（列表）</strong></h2><p>List（列表） 是 Python 中使用最频繁的数据类型。</p>\n<p>列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。</p>\n<p>列表是写在方括号 [] 之间、用逗号分隔开的元素列表。</p>\n<p>和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。</p>\n<p>列表截取的语法格式如下：</p>\n<p>变量[头下标:尾下标:步长]</p>\n<p>索引值以 0 为开始值，-1 为从末尾的开始位置。</p>\n<p>a[2:5] = [] 意味着删除第2到第4位</p>\n<p>如果步长为负数，表示逆向读取</p>\n<p>可以用del来删除某个位置的元素 例如：del a[2]</p>\n<p>常用函数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">len(list) <span class=\"comment\">#列表元素个数</span></span><br><span class=\"line\">max(list) ; min(list) <span class=\"comment\">#列表最大最小</span></span><br><span class=\"line\">list(seq) <span class=\"comment\">#序列变列表</span></span><br><span class=\"line\"></span><br><span class=\"line\">list.append(obj)</span><br><span class=\"line\">list.count(obj)</span><br><span class=\"line\">list.index(obj)</span><br><span class=\"line\">list.extend(seq)</span><br><span class=\"line\">list.insert(index,obj)</span><br><span class=\"line\">list.pop([index=<span class=\"number\">-1</span>])</span><br><span class=\"line\">list.remove(obj)</span><br><span class=\"line\">list.reverse()</span><br><span class=\"line\">list.sort(key=<span class=\"literal\">None</span>,reverse=<span class=\"literal\">False</span>)</span><br><span class=\"line\">list.clear()</span><br><span class=\"line\">list.copy()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Tuple（元组）\"><a href=\"#Tuple（元组）\" class=\"headerlink\" title=\"Tuple（元组）\"></a><strong>Tuple（元组）</strong></h2><p>元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 () 里，元素之间用逗号隔开。 </p>\n<p>虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</p>\n<p>构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tup1 = ()    <span class=\"comment\"># 空元组</span></span><br><span class=\"line\">tup2 = (<span class=\"number\">20</span>,) <span class=\"comment\"># 一个元素，需要在元素后添加逗号</span></span><br></pre></td></tr></table></figure></p>\n<p>string、list 和 tuple 都属于 sequence（序列）。</p>\n<p>注意：</p>\n<pre><code>1、与字符串一样，元组的元素不能修改。\n2、元组也可以被索引和切片，方法一样。\n3、注意构造包含 0 或 1 个元素的元组的特殊语法规则。\n4、元组也可以使用+操作符进行拼接。\n</code></pre><h2 id=\"Set（集合）\"><a href=\"#Set（集合）\" class=\"headerlink\" title=\"Set（集合）\"></a><strong>Set（集合）</strong></h2><p>集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。</p>\n<p>基本功能是进行成员关系测试和删除重复元素。</p>\n<p>可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。</p>\n<p>运算<br>in 判断是否在集合内，返回bool</p>\n<ul>\n<li>集合求差集<br>|  集合求并集<br>&amp;  集合求交集<br>^ 集合求不同时存在的元素</li>\n</ul>\n<p>创建格式：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parame = &#123;value01,value02,...&#125;</span><br><span class=\"line\"><span class=\"comment\">#或者</span></span><br><span class=\"line\">set(value)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"> </span><br><span class=\"line\">student = &#123;<span class=\"string\">'Tom'</span>, <span class=\"string\">'Jim'</span>, <span class=\"string\">'Mary'</span>, <span class=\"string\">'Tom'</span>, <span class=\"string\">'Jack'</span>, <span class=\"string\">'Rose'</span>&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">print(student)   <span class=\"comment\"># 输出集合，重复的元素被自动去掉</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 成员测试</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"string\">'Rose'</span> <span class=\"keyword\">in</span> student :</span><br><span class=\"line\">    print(<span class=\"string\">'Rose 在集合中'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    print(<span class=\"string\">'Rose 不在集合中'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># set可以进行集合运算</span></span><br><span class=\"line\">a = set(<span class=\"string\">'abracadabra'</span>)</span><br><span class=\"line\">b = set(<span class=\"string\">'alacazam'</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">print(a)</span><br><span class=\"line\">print(a - b)     <span class=\"comment\"># a 和 b 的差集</span></span><br><span class=\"line\">print(a | b)     <span class=\"comment\"># a 和 b 的并集</span></span><br><span class=\"line\">print(a &amp; b)     <span class=\"comment\"># a 和 b 的交集</span></span><br><span class=\"line\">print(a ^ b)     <span class=\"comment\"># a 和 b 中不同时存在的元素</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Dictionary（字典）\"><a href=\"#Dictionary（字典）\" class=\"headerlink\" title=\"Dictionary（字典）\"></a><strong>Dictionary（字典）</strong></h2><p>  字典（dictionary）是Python中另一个非常有用的内置数据类型。</p>\n<p>列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p>\n<p>字典是一种映射类型，字典用 ${ }$ 标识，它是一个无序的 $键(key) : 值(value)$ 的集合。</p>\n<p>键(key)必须使用不可变类型。</p>\n<p>在同一个字典中，键(key)必须是唯一的。 </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"> </span><br><span class=\"line\">dict = &#123;&#125;</span><br><span class=\"line\">dict[<span class=\"string\">'one'</span>] = <span class=\"string\">\"1 - 菜鸟教程\"</span></span><br><span class=\"line\">dict[<span class=\"number\">2</span>]     = <span class=\"string\">\"2 - 菜鸟工具\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">tinydict = &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'runoob'</span>,<span class=\"string\">'code'</span>:<span class=\"number\">1</span>, <span class=\"string\">'site'</span>: <span class=\"string\">'www.runoob.com'</span>&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">print</span> (dict[<span class=\"string\">'one'</span>])       <span class=\"comment\"># 输出键为 'one' 的值</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> (dict[<span class=\"number\">2</span>])           <span class=\"comment\"># 输出键为 2 的值</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> (tinydict)          <span class=\"comment\"># 输出完整的字典</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> (tinydict.keys())   <span class=\"comment\"># 输出所有键</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> (tinydict.values()) <span class=\"comment\"># 输出所有值</span></span><br></pre></td></tr></table></figure>\n<p>构造函数 dict() 可以直接从键值对序列中构建字典如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;dict([(<span class=\"string\">'Runoob'</span>, <span class=\"number\">1</span>), (<span class=\"string\">'Google'</span>, <span class=\"number\">2</span>), (<span class=\"string\">'Taobao'</span>, <span class=\"number\">3</span>)])</span><br><span class=\"line\">&#123;<span class=\"string\">'Taobao'</span>: <span class=\"number\">3</span>, <span class=\"string\">'Runoob'</span>: <span class=\"number\">1</span>, <span class=\"string\">'Google'</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>&#123;x: x**<span class=\"number\">2</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> (<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>)&#125;</span><br><span class=\"line\">&#123;<span class=\"number\">2</span>: <span class=\"number\">4</span>, <span class=\"number\">4</span>: <span class=\"number\">16</span>, <span class=\"number\">6</span>: <span class=\"number\">36</span>&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dict(Runoob=<span class=\"number\">1</span>, Google=<span class=\"number\">2</span>, Taobao=<span class=\"number\">3</span>)</span><br><span class=\"line\">&#123;<span class=\"string\">'Runoob'</span>: <span class=\"number\">1</span>, <span class=\"string\">'Google'</span>: <span class=\"number\">2</span>, <span class=\"string\">'Taobao'</span>: <span class=\"number\">3</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Python数据类型转换\"><a href=\"#Python数据类型转换\" class=\"headerlink\" title=\"Python数据类型转换\"></a><strong>Python数据类型转换</strong></h2><p> 有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。</p>\n<p>以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>int(x [,base])</td>\n<td>将x转换为一个整数</td>\n</tr>\n<tr>\n<td>float(x)</td>\n<td>将x转换到一个浮点数</td>\n</tr>\n<tr>\n<td>complex(real [,imag])</td>\n<td>创建一个复数</td>\n</tr>\n<tr>\n<td>str(x)</td>\n<td>将对象 x 转换为字符串</td>\n</tr>\n<tr>\n<td>repr(x)</td>\n<td>将对象 x 转换为表达式字符串</td>\n</tr>\n<tr>\n<td>eval(str)</td>\n<td>用来计算在字符串中的有效Python表达式,并返回一个对象</td>\n</tr>\n<tr>\n<td>tuple(s)</td>\n<td>将序列 s 转换为一个元组</td>\n</tr>\n<tr>\n<td>list(s)</td>\n<td>将序列 s 转换为一个列表</td>\n</tr>\n<tr>\n<td>set(s)</td>\n<td>转换为可变集合</td>\n</tr>\n<tr>\n<td>dict(d)</td>\n<td>创建一个字典。d 必须是一个 (key, value)元组序列。</td>\n</tr>\n<tr>\n<td>frozenset(s)</td>\n<td>转换为不可变集合</td>\n</tr>\n<tr>\n<td>chr(x)</td>\n<td>将一个整数转换为一个字符</td>\n</tr>\n<tr>\n<td>ord(x)</td>\n<td>将一个字符转换为它的整数值</td>\n</tr>\n<tr>\n<td>hex(x)</td>\n<td>将一个整数转换为一个十六进制字符串</td>\n</tr>\n<tr>\n<td>oct(x)</td>\n<td>将一个整数转换为一个八进制字符串</td>\n</tr>\n</tbody>\n</table>\n</div>\n","thumbnail":"../img/background/2.png","primarycolor":"YJSchaf","accentcolor":"indigo","categories":[],"tags":[]}