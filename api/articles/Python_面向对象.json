{"title":"Python-面向对象","slug":"Python_面向对象","date":"2019-11-09T16:00:00.000Z","updated":"2019-11-10T04:33:03.008Z","comments":true,"excerpt":"","content":"<h1 id=\"YJSchaf’s-study-of-Python\"><a href=\"#YJSchaf’s-study-of-Python\" class=\"headerlink\" title=\"YJSchaf’s study of Python\"></a>YJSchaf’s study of Python</h1><h2 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a><strong>面向对象</strong></h2><h3 id=\"类定义\"><a href=\"#类定义\" class=\"headerlink\" title=\"类定义\"></a>类定义</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassName</span>:</span></span><br><span class=\"line\">  &lt;statement<span class=\"number\">-1</span>&gt;</span><br><span class=\"line\">  .</span><br><span class=\"line\">  .</span><br><span class=\"line\">  .</span><br><span class=\"line\">  &lt;statement-N&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"类的方法\"><a href=\"#类的方法\" class=\"headerlink\" title=\"类的方法\"></a>类的方法</h3><blockquote>\n<h4 id=\"普通方法\"><a href=\"#普通方法\" class=\"headerlink\" title=\"普通方法\"></a>普通方法</h4><blockquote>\n<p>第一个为self,可以访问实例属性 ，只能被实例调用</p>\n</blockquote>\n<h4 id=\"类方法\"><a href=\"#类方法\" class=\"headerlink\" title=\"类方法\"></a>类方法</h4><blockquote>\n<p>可以访问类属性，第一个参数为cls，代表当前类，能被类与实例调用<br>用 @classmethod 修饰<br>并不会实例化一个实例出来</p>\n</blockquote>\n<h4 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h4><blockquote>\n<p>不可以访问类属性，类和实例都可以调用<br>用 @staticmethod 修饰<br>并不会实例化一个实例出来</p>\n</blockquote>\n<h3 id=\"类对象\"><a href=\"#类对象\" class=\"headerlink\" title=\"类对象\"></a>类对象</h3><blockquote>\n<p>类对象可以支持属性引用与实例化</p>\n</blockquote>\n</blockquote>\n<h4 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"__init__\"></a>__init__</h4><blockquote>\n<p>定义了<strong>init</strong>()就会用此方法去初始化你的类</p>\n</blockquote>\n<h4 id=\"self\"><a href=\"#self\" class=\"headerlink\" title=\"self\"></a>self</h4><blockquote>\n<p>代笔类的实例，理解为当前实例本身。类的方法一般第一个参数要用self代表自己。</p>\n</blockquote>\n<h4 id=\"私有属性\"><a href=\"#私有属性\" class=\"headerlink\" title=\"私有属性\"></a>私有属性</h4><blockquote>\n<p>在属性前加双下划线，外部访问会报错。<br>实际上是对它进行改名，改成了’_ClassName__function’</p>\n</blockquote>\n<h4 id=\"类的专有方法\"><a href=\"#类的专有方法\" class=\"headerlink\" title=\"类的专有方法\"></a>类的专有方法</h4><ul>\n<li>__init__ : 构造函数，在生成对象时调用</li>\n<li>__del__ : 析构函数，释放对象时使用</li>\n<li>__repr__ : 打印，转换</li>\n<li>__str__: 字符串形式打印</li>\n<li>__setitem__ : 按照索引赋值</li>\n<li>__getitem__: 按照索引获取值</li>\n<li>__len__: 获得长度</li>\n<li>__cmp__: 比较运算</li>\n<li>__call__: 函数调用</li>\n<li>__add__: 加运算</li>\n<li>__sub__: 减运算</li>\n<li>__mul__: 乘运算</li>\n<li>__truediv__: 除运算</li>\n<li>__mod__: 求余运算</li>\n<li>__pow__: 乘方</li>\n</ul>\n<h3 id=\"多-继承\"><a href=\"#多-继承\" class=\"headerlink\" title=\"(多)继承\"></a>(多)继承</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DerivedClassName</span> <span class=\"params\">(BaseClassName1[,BaseClassName2,....])</span>:</span></span><br><span class=\"line\">  &lt;statement<span class=\"number\">-1</span>&gt;</span><br><span class=\"line\">  .</span><br><span class=\"line\">  .</span><br><span class=\"line\">  .</span><br><span class=\"line\">  &lt;statement-N&gt;</span><br></pre></td></tr></table></figure>\n<p>对于多个重名的方法，先在子类中从左到右找，找不到再在基类中按从左到右的方法优先查找。<br>基类必须与派生类在一盒作用域内。或<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DerivedClassName</span><span class=\"params\">(modname.BaseClassName)</span>:</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"方法重写\"><a href=\"#方法重写\" class=\"headerlink\" title=\"方法重写\"></a>方法重写</h3><p>写与基类同名的方法来代替他，如果要用基类的函数可以<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父类名称.方法名称(self,参数<span class=\"number\">1</span>，参数<span class=\"number\">2</span>，...)</span><br><span class=\"line\">super(子类，self).父类方法(参数<span class=\"number\">1</span>，参数<span class=\"number\">2</span>，....)</span><br></pre></td></tr></table></figure></p>\n<p>使用 super() 可以很好地避免构造函数被调用两次。</p>\n<h3 id=\"property装饰器\"><a href=\"#property装饰器\" class=\"headerlink\" title=\"@property装饰器\"></a>@property装饰器</h3><p>手动使属性私有,规范或个性化这个属性的调用与修改<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassName</span><span class=\"params\">()</span> :</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span> <span class=\"params\">(self,attribute)</span>:</span></span><br><span class=\"line\">    self._attribute = attribute</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">  @property #规范调用</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">attribute</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self._attribute</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\">  @attribute.setter #规范修改</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">attribute</span><span class=\"params\">(self,attribute)</span>:</span></span><br><span class=\"line\">    self._attribute = attribute</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"动态绑定属性与方法\"><a href=\"#动态绑定属性与方法\" class=\"headerlink\" title=\"动态绑定属性与方法\"></a>动态绑定属性与方法</h3><ul>\n<li><p>动态添加对象属性<br>在类的外面对对象随意绑定属性，写出来就行。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example.NewAttribute = attribute</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>动态添加类属性</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassName.NewAttribute = attribute</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>绑定方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> types</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassName</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">()</span> :</span></span><br><span class=\"line\">    ....</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Method</span><span class=\"params\">(*arg)</span> :</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@classmethod</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ClassMethod</span><span class=\"params\">(cls,*arg)</span> :</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"meta\">@staticmethod</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">StaticMethod</span><span class=\"params\">(*arg)</span> :</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#绑定实例方法</span></span><br><span class=\"line\">Example = ClassName()</span><br><span class=\"line\">Example = tpyes.MethodType(Method,Example)</span><br><span class=\"line\">Example.Method()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#绑定类方法,这个类所有实例都可以用了</span></span><br><span class=\"line\">ClassName.ClassMethod = ClassMethod</span><br><span class=\"line\">ClassName.ClassMethod()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#绑定静态方法,这个类所有实例都可以用了</span></span><br><span class=\"line\">ClassName.StaticMethod = StaticMethod</span><br><span class=\"line\">ClassName.StaticMethod()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"slots\"><a href=\"#slots\" class=\"headerlink\" title=\"__slots__\"></a>__slots__</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__slots__ = (<span class=\"string\">\"Method1\"</span>,<span class=\"string\">\"Method2\"</span>,...)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>用于现在类可以绑定的方法</p>\n<ul>\n<li><strong>slots</strong>只对类对象进行限制，不对类进行限制</li>\n<li><strong>slots</strong>不仅限制类对象的属性，还限制类对象的方法</li>\n<li><strong>slots</strong>仅对当前类起作用，对继承的子类不起作用</li>\n<li>在子类中定义<strong>slots</strong>，子类允许定义的属性就是自身的<strong>slots</strong>加上父类的<strong>slots</strong></li>\n</ul>\n</blockquote>\n","thumbnail":"../img/background/3.jpg","primarycolor":"YJSchaf","accentcolor":"indigo","categories":[],"tags":[]}