<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YJSchaf‘s World</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yangyaojia.github.io/"/>
  <updated>2019-11-10T04:33:03.008Z</updated>
  <id>http://yangyaojia.github.io/</id>
  
  <author>
    <name>YJSchaf</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python-面向对象</title>
    <link href="http://yangyaojia.github.io/2019/11/10/Python_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yangyaojia.github.io/2019/11/10/Python_面向对象/</id>
    <published>2019-11-09T16:00:00.000Z</published>
    <updated>2019-11-10T04:33:03.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="YJSchaf’s-study-of-Python"><a href="#YJSchaf’s-study-of-Python" class="headerlink" title="YJSchaf’s study of Python"></a>YJSchaf’s study of Python</h1><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a><strong>面向对象</strong></h2><h3 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span>:</span></span><br><span class="line">  &lt;statement<span class="number">-1</span>&gt;</span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line">  &lt;statement-N&gt;</span><br></pre></td></tr></table></figure><h3 id="类的方法"><a href="#类的方法" class="headerlink" title="类的方法"></a>类的方法</h3><blockquote><h4 id="普通方法"><a href="#普通方法" class="headerlink" title="普通方法"></a>普通方法</h4><blockquote><p>第一个为self,可以访问实例属性 ，只能被实例调用</p></blockquote><h4 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h4><blockquote><p>可以访问类属性，第一个参数为cls，代表当前类，能被类与实例调用<br>用 @classmethod 修饰<br>并不会实例化一个实例出来</p></blockquote><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><blockquote><p>不可以访问类属性，类和实例都可以调用<br>用 @staticmethod 修饰<br>并不会实例化一个实例出来</p></blockquote><h3 id="类对象"><a href="#类对象" class="headerlink" title="类对象"></a>类对象</h3><blockquote><p>类对象可以支持属性引用与实例化</p></blockquote></blockquote><h4 id="init"><a href="#init" class="headerlink" title="__init__"></a>__init__</h4><blockquote><p>定义了<strong>init</strong>()就会用此方法去初始化你的类</p></blockquote><h4 id="self"><a href="#self" class="headerlink" title="self"></a>self</h4><blockquote><p>代笔类的实例，理解为当前实例本身。类的方法一般第一个参数要用self代表自己。</p></blockquote><h4 id="私有属性"><a href="#私有属性" class="headerlink" title="私有属性"></a>私有属性</h4><blockquote><p>在属性前加双下划线，外部访问会报错。<br>实际上是对它进行改名，改成了’_ClassName__function’</p></blockquote><h4 id="类的专有方法"><a href="#类的专有方法" class="headerlink" title="类的专有方法"></a>类的专有方法</h4><ul><li>__init__ : 构造函数，在生成对象时调用</li><li>__del__ : 析构函数，释放对象时使用</li><li>__repr__ : 打印，转换</li><li>__str__: 字符串形式打印</li><li>__setitem__ : 按照索引赋值</li><li>__getitem__: 按照索引获取值</li><li>__len__: 获得长度</li><li>__cmp__: 比较运算</li><li>__call__: 函数调用</li><li>__add__: 加运算</li><li>__sub__: 减运算</li><li>__mul__: 乘运算</li><li>__truediv__: 除运算</li><li>__mod__: 求余运算</li><li>__pow__: 乘方</li></ul><h3 id="多-继承"><a href="#多-继承" class="headerlink" title="(多)继承"></a>(多)继承</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DerivedClassName</span> <span class="params">(BaseClassName1[,BaseClassName2,....])</span>:</span></span><br><span class="line">  &lt;statement<span class="number">-1</span>&gt;</span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line">  &lt;statement-N&gt;</span><br></pre></td></tr></table></figure><p>对于多个重名的方法，先在子类中从左到右找，找不到再在基类中按从左到右的方法优先查找。<br>基类必须与派生类在一盒作用域内。或<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DerivedClassName</span><span class="params">(modname.BaseClassName)</span>:</span></span><br></pre></td></tr></table></figure></p><h3 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h3><p>写与基类同名的方法来代替他，如果要用基类的函数可以<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">父类名称.方法名称(self,参数<span class="number">1</span>，参数<span class="number">2</span>，...)</span><br><span class="line">super(子类，self).父类方法(参数<span class="number">1</span>，参数<span class="number">2</span>，....)</span><br></pre></td></tr></table></figure></p><p>使用 super() 可以很好地避免构造函数被调用两次。</p><h3 id="property装饰器"><a href="#property装饰器" class="headerlink" title="@property装饰器"></a>@property装饰器</h3><p>手动使属性私有,规范或个性化这个属性的调用与修改<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span><span class="params">()</span> :</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span> <span class="params">(self,attribute)</span>:</span></span><br><span class="line">    self._attribute = attribute</span><br><span class="line"></span><br><span class="line"><span class="meta">  @property #规范调用</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">attribute</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self._attribute</span><br><span class="line">  </span><br><span class="line"><span class="meta">  @attribute.setter #规范修改</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">attribute</span><span class="params">(self,attribute)</span>:</span></span><br><span class="line">    self._attribute = attribute</span><br></pre></td></tr></table></figure></p><h3 id="动态绑定属性与方法"><a href="#动态绑定属性与方法" class="headerlink" title="动态绑定属性与方法"></a>动态绑定属性与方法</h3><ul><li><p>动态添加对象属性<br>在类的外面对对象随意绑定属性，写出来就行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Example.NewAttribute = attribute</span><br></pre></td></tr></table></figure></li><li><p>动态添加类属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ClassName.NewAttribute = attribute</span><br></pre></td></tr></table></figure></li></ul><p>绑定方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> types</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">()</span> :</span></span><br><span class="line">    ....</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Method</span><span class="params">(*arg)</span> :</span></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ClassMethod</span><span class="params">(cls,*arg)</span> :</span></span><br><span class="line">  ...</span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">StaticMethod</span><span class="params">(*arg)</span> :</span></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line"><span class="comment">#绑定实例方法</span></span><br><span class="line">Example = ClassName()</span><br><span class="line">Example = tpyes.MethodType(Method,Example)</span><br><span class="line">Example.Method()</span><br><span class="line"></span><br><span class="line"><span class="comment">#绑定类方法,这个类所有实例都可以用了</span></span><br><span class="line">ClassName.ClassMethod = ClassMethod</span><br><span class="line">ClassName.ClassMethod()</span><br><span class="line"></span><br><span class="line"><span class="comment">#绑定静态方法,这个类所有实例都可以用了</span></span><br><span class="line">ClassName.StaticMethod = StaticMethod</span><br><span class="line">ClassName.StaticMethod()</span><br></pre></td></tr></table></figure></p><h3 id="slots"><a href="#slots" class="headerlink" title="__slots__"></a>__slots__</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__slots__ = (<span class="string">"Method1"</span>,<span class="string">"Method2"</span>,...)</span><br></pre></td></tr></table></figure><blockquote><p>用于现在类可以绑定的方法</p><ul><li><strong>slots</strong>只对类对象进行限制，不对类进行限制</li><li><strong>slots</strong>不仅限制类对象的属性，还限制类对象的方法</li><li><strong>slots</strong>仅对当前类起作用，对继承的子类不起作用</li><li>在子类中定义<strong>slots</strong>，子类允许定义的属性就是自身的<strong>slots</strong>加上父类的<strong>slots</strong></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;YJSchaf’s-study-of-Python&quot;&gt;&lt;a href=&quot;#YJSchaf’s-study-of-Python&quot; class=&quot;headerlink&quot; title=&quot;YJSchaf’s study of Python&quot;&gt;&lt;/a&gt;YJSchaf’s s
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python-数据类型</title>
    <link href="http://yangyaojia.github.io/2019/11/06/Python_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yangyaojia.github.io/2019/11/06/Python_数据类型/</id>
    <published>2019-11-05T16:00:00.000Z</published>
    <updated>2019-11-10T04:28:35.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="YJSchaf’s-study-of-Python"><a href="#YJSchaf’s-study-of-Python" class="headerlink" title="YJSchaf’s study of Python"></a>YJSchaf’s study of Python</h1><h2 id="标准数据类型"><a href="#标准数据类型" class="headerlink" title="标准数据类型"></a><strong>标准数据类型</strong></h2><p>Python3 中有六个标准的数据类型：</p><ul><li>Number（数字）</li><li>String（字符串）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Set（集合）</li><li>Dictionary（字典）</li></ul><p>Python3 的六个标准数据类型中：</p><ul><li>不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组）；</li></ul><ul><li>可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合）。</li></ul><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a><strong>赋值</strong></h3><p>可以单个赋值 ,也可连着赋值，更可以多个赋值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">a = b = c = d = <span class="number">1</span></span><br><span class="line">a , b , c = <span class="number">11</span> , <span class="string">"HHHHHH"</span> , <span class="literal">True</span></span><br></pre></td></tr></table></figure></p><h3 id="判断数据类型"><a href="#判断数据类型" class="headerlink" title="判断数据类型"></a><strong>判断数据类型</strong></h3><p><strong>type()</strong></p><p>type() 返回 <class '类型'></class></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(type(变量))</span><br></pre></td></tr></table></figure><p><strong>isinstance(变量, 类型)</strong></p><p>返回0\1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(isinstance(变量, 类型))</span><br></pre></td></tr></table></figure><p> isinstance 和 type 的区别在于：</p><ul><li>type()不会认为子类是一种父类类型。</li><li>isinstance()会认为子类是一种父类类型。</li></ul><h3 id="可以用del来删除定义的变量，多个用“-”隔开"><a href="#可以用del来删除定义的变量，多个用“-”隔开" class="headerlink" title="可以用del来删除定义的变量，多个用“,”隔开"></a>可以用<strong>del</strong>来删除定义的变量，多个用“,”隔开</h3><h2 id="Number（数字）"><a href="#Number（数字）" class="headerlink" title="Number（数字）"></a><strong>Number（数字）</strong></h2><p>Python3 支持 int、float、bool、complex（复数）。</p><p>在Python 3里，只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</p><p>像大多数语言一样，数值类型的赋值和计算都是很直观的。</p><p>内置的 type() 函数可以用来查询变量所指的对象类型。</p><p><strong>数值的除法包含两个运算符：/ 返回一个浮点数，// 返回一个整数。</strong></p><p>在混合计算时，Python会把整型转换成为浮点数。 </p><p><strong>math 库</strong> </p><blockquote><p>abs，ceil，exp，fabs，floor，log，log10，log2，max(可加序列)，min(可加序列)，modf，pow，round(x[,n]) 四舍五入到小数点后n位，sqrt()，hypot(x,y) = $ \sqrt{x^2+y^2} $</p></blockquote><p><strong>random库</strong><br>choice(seq)序列中随机挑一个，randrange([start,]stop[,step=1]) 在一定范围内按步长随机挑一个数，random()$ [0,1)$随机，randint(star,stop) $[star,stop]$区间内随机整数 ， uniform(star,stop) 在$[star,stop]$ 区间内随机一个整数，shuffle(lst) 序列所有元素随机排序。</p><h2 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a><strong>String（字符串）</strong></h2><p>Python中的字符串用单引号 ‘ 或双引号 “ 括起来，同时使用反斜杠 \ 转义特殊字符。</p><p>Python 不支持单字符类型，单字符在 Python 中也是作为一个字符串使用。</p><p>字符串的截取的语法格式如下：</p><p>变量[头下标:尾下标:步长]</p><p>加号 + 是字符串的连接符， 星号 * 表示复制当前字符串，紧跟的数字为复制的次数。</p><p>Python 使用反斜杠(\)转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个 r，表示原始字符串</p><p> 另外，反斜杠()可以作为续行符，表示下一行是上一行的延续。也可以使用 “””…””” 或者 ‘’’…’’’ 跨越多行。</p><p>注意，Python 没有单独的字符类型，一个字符就是长度为1的字符串。 </p><div class="table-container"><table><thead><tr><th>符号</th><th>\</th><th>\‘</th><th>\“</th><th>\a</th><th>\b</th><th>\000</th><th>\n</th><th>\v</th><th>\t</th><th>\r</th><th>\f</th><th>\oyy</th><th>\xyy</th><th>\other</th></tr></thead><tbody><tr><td>含义</td><td>续行</td><td>单引</td><td>双引</td><td>响铃</td><td>退格</td><td>空</td><td>换行</td><td>纵向制表</td><td>横向制表</td><td>回车</td><td>换页</td><td>八进制数，yy 代表的字符</td><td>十六进制数，yy代表的字符</td><td>其它的字符以普通格式输出</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>符号</th><th>%c</th><th>%s</th><th>%d</th><th>%u</th><th>%o</th><th>%x</th><th>%X</th><th>%f</th><th>%e</th><th>%E</th><th>%g</th><th>%G</th><th>%p</th></tr></thead><tbody><tr><td>含义</td><td>字符及其ASCII码</td><td>字符串</td><td>整数</td><td>无符号整形</td><td>八进制</td><td>16进制</td><td>16大写</td><td>浮点</td><td>科学计数法</td><td>科学计数法</td><td>最短输出</td><td>最短输出</td><td>用十六进制数格式化变量的地址</td><td></td></tr></tbody></table></div><h2 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a><strong>List（列表）</strong></h2><p>List（列表） 是 Python 中使用最频繁的数据类型。</p><p>列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。</p><p>列表是写在方括号 [] 之间、用逗号分隔开的元素列表。</p><p>和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。</p><p>列表截取的语法格式如下：</p><p>变量[头下标:尾下标:步长]</p><p>索引值以 0 为开始值，-1 为从末尾的开始位置。</p><p>a[2:5] = [] 意味着删除第2到第4位</p><p>如果步长为负数，表示逆向读取</p><p>可以用del来删除某个位置的元素 例如：del a[2]</p><p>常用函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">len(list) <span class="comment">#列表元素个数</span></span><br><span class="line">max(list) ; min(list) <span class="comment">#列表最大最小</span></span><br><span class="line">list(seq) <span class="comment">#序列变列表</span></span><br><span class="line"></span><br><span class="line">list.append(obj)</span><br><span class="line">list.count(obj)</span><br><span class="line">list.index(obj)</span><br><span class="line">list.extend(seq)</span><br><span class="line">list.insert(index,obj)</span><br><span class="line">list.pop([index=<span class="number">-1</span>])</span><br><span class="line">list.remove(obj)</span><br><span class="line">list.reverse()</span><br><span class="line">list.sort(key=<span class="literal">None</span>,reverse=<span class="literal">False</span>)</span><br><span class="line">list.clear()</span><br><span class="line">list.copy()</span><br></pre></td></tr></table></figure></p><h2 id="Tuple（元组）"><a href="#Tuple（元组）" class="headerlink" title="Tuple（元组）"></a><strong>Tuple（元组）</strong></h2><p>元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 () 里，元素之间用逗号隔开。 </p><p>虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</p><p>构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tup1 = ()    <span class="comment"># 空元组</span></span><br><span class="line">tup2 = (<span class="number">20</span>,) <span class="comment"># 一个元素，需要在元素后添加逗号</span></span><br></pre></td></tr></table></figure></p><p>string、list 和 tuple 都属于 sequence（序列）。</p><p>注意：</p><pre><code>1、与字符串一样，元组的元素不能修改。2、元组也可以被索引和切片，方法一样。3、注意构造包含 0 或 1 个元素的元组的特殊语法规则。4、元组也可以使用+操作符进行拼接。</code></pre><h2 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a><strong>Set（集合）</strong></h2><p>集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。</p><p>基本功能是进行成员关系测试和删除重复元素。</p><p>可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。</p><p>运算<br>in 判断是否在集合内，返回bool</p><ul><li>集合求差集<br>|  集合求并集<br>&amp;  集合求交集<br>^ 集合求不同时存在的元素</li></ul><p>创建格式：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">parame = &#123;value01,value02,...&#125;</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">set(value)</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line">student = &#123;<span class="string">'Tom'</span>, <span class="string">'Jim'</span>, <span class="string">'Mary'</span>, <span class="string">'Tom'</span>, <span class="string">'Jack'</span>, <span class="string">'Rose'</span>&#125;</span><br><span class="line"> </span><br><span class="line">print(student)   <span class="comment"># 输出集合，重复的元素被自动去掉</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 成员测试</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'Rose'</span> <span class="keyword">in</span> student :</span><br><span class="line">    print(<span class="string">'Rose 在集合中'</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    print(<span class="string">'Rose 不在集合中'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># set可以进行集合运算</span></span><br><span class="line">a = set(<span class="string">'abracadabra'</span>)</span><br><span class="line">b = set(<span class="string">'alacazam'</span>)</span><br><span class="line"> </span><br><span class="line">print(a)</span><br><span class="line">print(a - b)     <span class="comment"># a 和 b 的差集</span></span><br><span class="line">print(a | b)     <span class="comment"># a 和 b 的并集</span></span><br><span class="line">print(a &amp; b)     <span class="comment"># a 和 b 的交集</span></span><br><span class="line">print(a ^ b)     <span class="comment"># a 和 b 中不同时存在的元素</span></span><br></pre></td></tr></table></figure></p><h2 id="Dictionary（字典）"><a href="#Dictionary（字典）" class="headerlink" title="Dictionary（字典）"></a><strong>Dictionary（字典）</strong></h2><p>  字典（dictionary）是Python中另一个非常有用的内置数据类型。</p><p>列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p><p>字典是一种映射类型，字典用 ${ }$ 标识，它是一个无序的 $键(key) : 值(value)$ 的集合。</p><p>键(key)必须使用不可变类型。</p><p>在同一个字典中，键(key)必须是唯一的。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line">dict = &#123;&#125;</span><br><span class="line">dict[<span class="string">'one'</span>] = <span class="string">"1 - 菜鸟教程"</span></span><br><span class="line">dict[<span class="number">2</span>]     = <span class="string">"2 - 菜鸟工具"</span></span><br><span class="line"> </span><br><span class="line">tinydict = &#123;<span class="string">'name'</span>: <span class="string">'runoob'</span>,<span class="string">'code'</span>:<span class="number">1</span>, <span class="string">'site'</span>: <span class="string">'www.runoob.com'</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (dict[<span class="string">'one'</span>])       <span class="comment"># 输出键为 'one' 的值</span></span><br><span class="line"><span class="keyword">print</span> (dict[<span class="number">2</span>])           <span class="comment"># 输出键为 2 的值</span></span><br><span class="line"><span class="keyword">print</span> (tinydict)          <span class="comment"># 输出完整的字典</span></span><br><span class="line"><span class="keyword">print</span> (tinydict.keys())   <span class="comment"># 输出所有键</span></span><br><span class="line"><span class="keyword">print</span> (tinydict.values()) <span class="comment"># 输出所有值</span></span><br></pre></td></tr></table></figure><p>构造函数 dict() 可以直接从键值对序列中构建字典如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;dict([(<span class="string">'Runoob'</span>, <span class="number">1</span>), (<span class="string">'Google'</span>, <span class="number">2</span>), (<span class="string">'Taobao'</span>, <span class="number">3</span>)])</span><br><span class="line">&#123;<span class="string">'Taobao'</span>: <span class="number">3</span>, <span class="string">'Runoob'</span>: <span class="number">1</span>, <span class="string">'Google'</span>: <span class="number">2</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;x: x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>)&#125;</span><br><span class="line">&#123;<span class="number">2</span>: <span class="number">4</span>, <span class="number">4</span>: <span class="number">16</span>, <span class="number">6</span>: <span class="number">36</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict(Runoob=<span class="number">1</span>, Google=<span class="number">2</span>, Taobao=<span class="number">3</span>)</span><br><span class="line">&#123;<span class="string">'Runoob'</span>: <span class="number">1</span>, <span class="string">'Google'</span>: <span class="number">2</span>, <span class="string">'Taobao'</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Python数据类型转换"><a href="#Python数据类型转换" class="headerlink" title="Python数据类型转换"></a><strong>Python数据类型转换</strong></h2><p> 有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。</p><p>以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。</p><div class="table-container"><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>int(x [,base])</td><td>将x转换为一个整数</td></tr><tr><td>float(x)</td><td>将x转换到一个浮点数</td></tr><tr><td>complex(real [,imag])</td><td>创建一个复数</td></tr><tr><td>str(x)</td><td>将对象 x 转换为字符串</td></tr><tr><td>repr(x)</td><td>将对象 x 转换为表达式字符串</td></tr><tr><td>eval(str)</td><td>用来计算在字符串中的有效Python表达式,并返回一个对象</td></tr><tr><td>tuple(s)</td><td>将序列 s 转换为一个元组</td></tr><tr><td>list(s)</td><td>将序列 s 转换为一个列表</td></tr><tr><td>set(s)</td><td>转换为可变集合</td></tr><tr><td>dict(d)</td><td>创建一个字典。d 必须是一个 (key, value)元组序列。</td></tr><tr><td>frozenset(s)</td><td>转换为不可变集合</td></tr><tr><td>chr(x)</td><td>将一个整数转换为一个字符</td></tr><tr><td>ord(x)</td><td>将一个字符转换为它的整数值</td></tr><tr><td>hex(x)</td><td>将一个整数转换为一个十六进制字符串</td></tr><tr><td>oct(x)</td><td>将一个整数转换为一个八进制字符串</td></tr></tbody></table></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;YJSchaf’s-study-of-Python&quot;&gt;&lt;a href=&quot;#YJSchaf’s-study-of-Python&quot; class=&quot;headerlink&quot; title=&quot;YJSchaf’s study of Python&quot;&gt;&lt;/a&gt;YJSchaf’s s
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yangyaojia.github.io/2017/09/01/hello-world/"/>
    <id>http://yangyaojia.github.io/2017/09/01/hello-world/</id>
    <published>2017-08-31T16:00:00.000Z</published>
    <updated>2017-09-08T02:24:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
